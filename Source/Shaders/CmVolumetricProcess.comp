// Copyright (c) 2022 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

// "Volumetric Fog and Lighting", Bart Wronski

#define DESC_SET_VOLUMETRIC 0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_RANDOM 2
#include "ShaderCommonGLSLFunc.h"
#include "Random.h"
#include "Volumetric.h"

layout( local_size_x = COMPUTE_VOLUMETRIC_GROUP_SIZE_X,
        local_size_y = COMPUTE_VOLUMETRIC_GROUP_SIZE_Y,
        local_size_z = 1 ) in;

layout( constant_id = 0 ) const float g_temporalWeight = 0.95;

// rgb - in−scattered light accumulated so far
// a   - accumulated scattering coefficient
vec4 accumulateScattering( const vec4 front, const vec4 back )
{
    vec3 light = front.rgb + saturate( exp( -front.a ) ) * back.rgb;

    return vec4( light.rgb, front.a + back.a );
}

void store( const ivec3 cell, const vec4 colorAndDensity )
{
    vec4 final = vec4( colorAndDensity.rgb, exp( -colorAndDensity.a ) );

    if( g_temporalWeight > 0.0 )
    {
        vec4 prev = volume_sample_Prev( cell );
        final     = mix( final, prev, g_temporalWeight );
    }

    // rgb - in−scattered light accumulated so far
    // a   - scene light transmittance
    imageStore( g_volumetric, cell, final );
}

void main()
{
    const int x = int( gl_GlobalInvocationID.x );
    const int y = int( gl_GlobalInvocationID.y );


    vec4 accum = texelFetch( g_volumetric_Sampler, ivec3( x, y, 0 ), 0 );
    store( ivec3( x, y, 0 ), accum );

    for( int z = 1; z < VOLUMETRIC_SIZE_Z; z++ )
    {
        const ivec3 cell = ivec3( x, y, z );
        const vec4  v    = texelFetch( g_volumetric_Sampler, cell, 0 );

        accum = accumulateScattering( accum, v );

        store( cell, accum );
    }
}