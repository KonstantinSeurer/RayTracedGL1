// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

// don't need albedo for direct illumination
#define MATERIAL_MAX_ALBEDO_LAYERS 0
#define MATERIAL_LIGHTMAP_LAYER_INDEX -1

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define LIGHT_SAMPLE_METHOD (LIGHT_SAMPLE_METHOD_DIRECT)
#include "RaygenCommon.h"

void main()
{
    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);
    const uint seed = getRandomSeed(pix, globalUniform.frameId);

    const Surface surf = fetchGbufferSurface(pix);

    if (surf.isSky)
    {
        imageStore(framebufUnfilteredDirect, pix, uvec4(0));
        imageStore(framebufUnfilteredSpecular, pix, uvec4(0));
        imageStore(framebufGradientInputs, pix, vec4(0.0));
        imageStoreReservoir(emptyReservoir(), pix);
        return;
    }

    vec3 diffuse, specular;
    float distToLight;
    Reservoir r = processDirectIllumination(
        seed,
        pix, 
        surf,
        distToLight,
        diffuse, specular);

    // demodulate for denoising
    imageStoreUnfilteredDirect(pix, diffuse);
    imageStoreUnfilteredSpecular(pix, demodulateSpecular(specular, surf.specularColor));
    imageStore(framebufViewDirection, pix, vec4(-surf.toViewerDir, distToLight));
    imageStore(framebufGradientInputs, pix, vec4(getLuminance(diffuse), getLuminance(specular), 0, 0));
    imageStoreReservoir(r, pix);
}