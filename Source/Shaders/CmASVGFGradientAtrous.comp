// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

// "Gradient Estimation for Real-Time Adaptive Temporal Filtering", C.Schied et al.

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_GRADIENT_ATROUS_GROUP_SIZE_X, local_size_y = COMPUTE_GRADIENT_ATROUS_GROUP_SIZE_X, local_size_z = 1) in;

layout (constant_id = 0) const uint atrousIteration = 0;

const int STEP_SIZE = 1 << atrousIteration;


#if GRADIENT_ESTIMATION_ENABLED


// Current implementation of a-trous itearation for gradients doesn't use edge-avoiding
// samplerGradient[0] -- temporal gradient (eq. 2)
// samplerGradient[1] -- normalization factor (eq. 13)
void atrous(sampler2D samplerDISGradient, out vec3 outDISGradient)
{
    const ivec2 gradPix = ivec2(gl_GlobalInvocationID);
    const ivec3 gradArea = getCheckerboardedRenderArea(gradPix * COMPUTE_ASVGF_STRATA_SIZE) / COMPUTE_ASVGF_STRATA_SIZE;
    
    outDISGradient = vec3(0.0);
    float weightSum = 0.0;

    const int FilterSize = 1;
    const float waveletKernel[2][2] = 
    {
        { 1.0, 0.5  },
        { 0.5, 0.25 }
    };

    for (int yy = -FilterSize; yy <= FilterSize; yy++)
    {
        for (int xx = -FilterSize; xx <= FilterSize; xx++)
        {
            const ivec2 offset = ivec2(xx * STEP_SIZE, yy * STEP_SIZE);
            const ivec2 gradPix_q = gradPix + offset;

            const vec3 grad_q = texelFetch(samplerDISGradient, gradPix_q, 0).xyz;

            const float w = waveletKernel[abs(yy)][abs(xx)] *
                            float(testPixInRenderArea(gradPix_q, gradArea));

            outDISGradient += grad_q * w;
            weightSum += w;
        }
    }

    outDISGradient /= weightSum;
}

void main()
{
    const ivec2 gradPix = ivec2(gl_GlobalInvocationID);
    const ivec2 screenSize = ivec2(globalUniform.renderWidth, globalUniform.renderHeight);

    if (gradPix.x * COMPUTE_ASVGF_STRATA_SIZE >= screenSize.x || gradPix.y * COMPUTE_ASVGF_STRATA_SIZE >= screenSize.y)
    {
        return;
    }
    
    vec3 filteredDIS;

    switch (atrousIteration)
    {
         case 0: atrous(framebufDISPingGradient_Sampler, filteredDIS); break;
         case 1: atrous(framebufDISPongGradient_Sampler, filteredDIS); break;
         case 2: atrous(framebufDISPingGradient_Sampler, filteredDIS); break;
         case 3: atrous(framebufDISPongGradient_Sampler, filteredDIS); break;
    }
    
    switch (atrousIteration)
    {
         case 0: imageStore(framebufDISPongGradient, gradPix, vec4(filteredDIS, 0.0)); break;
         case 1: imageStore(framebufDISPingGradient, gradPix, vec4(filteredDIS, 0.0)); break;
         case 2: imageStore(framebufDISPongGradient, gradPix, vec4(filteredDIS, 0.0)); break;
         case 3: imageStore(framebufDISPingGradient, gradPix, vec4(filteredDIS, 0.0)); break;
    }
}


#if COMPUTE_ASVGF_GRADIENT_ATROUS_ITERATION_COUNT != 4
    #error Gradient atrous is implemented for 4 iterations 
#endif


#else
void main() {}
#endif // GRADIENT_ESTIMATION_ENABLED