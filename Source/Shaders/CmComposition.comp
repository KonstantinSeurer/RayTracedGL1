// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_TONEMAPPING 2
#define DESC_SET_LPM_PARAMS 3
#include "ShaderCommonGLSLFunc.h"
#include "LightGrid.h"

layout(local_size_x = COMPUTE_COMPOSE_GROUP_SIZE_X, local_size_y = COMPUTE_COMPOSE_GROUP_SIZE_Y, local_size_z = 1) in;

#define DEBUG_LPM 0

#define A_GLSL 1
#define A_GPU 1
#include "ffx_a.h"
layout(set = DESC_SET_LPM_PARAMS, binding = BINDING_LPM_PARAMS) readonly uniform LpmParams_BT
{
    AU4 g_lpmParams[24];
};
#if DEBUG_LPM
    AU4 debug_lpmParams[24];
    void LpmSetupOut(AU1 i, inAU4 v) { debug_lpmParams[i] = v; }
    AU4  LpmFilterCtl(AU1 i)         { return debug_lpmParams[i]; }
#else
    #define LPM_NO_SETUP 1
    AU4  LpmFilterCtl(AU1 i)         { return g_lpmParams[i]; }
#endif
#include "ffx_lpm.h"
#define LPM_RG_CONTEXT  /* used on CPU side */

vec3 lpmTonemap(vec3 c)
{
#if DEBUG_LPM
    varAF3(saturation) = initAF3(-0.1f, -0.1f, -0.1f);
    varAF3(crosstalk) = initAF3(1.0f, 1.0f / 8.0f, 1.0f / 16.0f);
    LpmSetup(
        LPM_RG_CONTEXT
        false, LPM_CONFIG_709_709,LPM_COLORS_709_709,
        0.0f, // softGap
        256.0f, // hdrMax
        7.5f, // exposure
        0.1f, // contrast
        1.0f, // shoulder contrast
        saturation, crosstalk);
#endif

    LpmFilter(c.r, c.g, c.b, false, LPM_CONFIG_709_709);
    return c;
}


vec3 uncharted2TonemapOp(const vec3 x)
{
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;

    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 uncharted2Tonemap(const vec3 color, float whitePoint)
{
    return uncharted2TonemapOp(2.0 * color) / uncharted2TonemapOp(vec3(whitePoint));
}


vec3 reinhard(const vec3 c)
{
    const vec3 c1 = clamp(c, exp2(globalUniform.minLogLuminance), exp2(globalUniform.maxLogLuminance));
    const float w2 = globalUniform.luminanceWhitePoint * globalUniform.luminanceWhitePoint;
    return c * (1.0 + c1 / w2) / (1.0 + c1);
}


vec3 tonemapRT(vec3 c)
{
    return lpmTonemap(c);
    // return uncharted2Tonemap(c, globalUniform.luminanceWhitePoint);
}


void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    if (pix.x >= uint(globalUniform.renderWidth) || pix.y >= uint(globalUniform.renderHeight))
    {
        return;
    }

    vec3 color = imageLoad(framebufPreFinal, pix).rgb;
    const vec4 albedo4 = texelFetchAlbedo(getCheckerboardPix(pix));
    
    if (globalUniform.lightmapEnable == 0)
    {   
        if (!isSky(albedo4))
        {
            color = tonemapRT(color * getExposure());

            const vec3 emission = albedo4.rgb * getScreenEmissionFromAlbedo4(albedo4) * globalUniform.emissionMaxScreenColor;
            color += emission;
        }
        else
        {
            const vec3 throughput = texelFetch(framebufThroughput_Sampler, getCheckerboardPix(pix), 0).rgb;

            color = albedo4.rgb * throughput;
        }
    }
    else
    {
        const vec3 throughput = texelFetch(framebufThroughput_Sampler, getCheckerboardPix(pix), 0).rgb;
        color = albedo4.rgb * throughput;

        if (!isSky(albedo4))
        {
            color = uncharted2Tonemap(color, 1.0);

            const vec3 emission = albedo4.rgb * getScreenEmissionFromAlbedo4(albedo4) * globalUniform.emissionMaxScreenColor;
            color += emission;
        }
    }


    if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_MOTION_VECTORS) != 0)
    {
        const vec2 m = texelFetch(framebufMotion_Sampler, getCheckerboardPix(pix), 0).rg;
        color.r = abs(m.r);
        color.g = abs(m.g);
        color.b = 0;
    }
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_UNFILTERED_DIFFUSE) != 0)
    {
        color = texelFetchUnfilteredDirect(getCheckerboardPix(pix));
    }
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_UNFILTERED_SPECULAR) != 0)
    {
        color = texelFetchUnfilteredSpecular(getCheckerboardPix(pix));
    }
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_UNFILTERED_INDIRECT) != 0)
    {
        const SH sh = imageLoadUnfilteredIndirectSH(getCheckerboardPix(pix));
        const vec3 normal = texelFetchNormal(getCheckerboardPix(pix));
        color = SHToIrradiance(sh, normal);
    }
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_LIGHT_GRID) != 0)
    {
        vec3 surfPos = texelFetch(framebufSurfacePosition_Sampler, getCheckerboardPix(pix), 0).xyz;
       
        vec3 cell = vec3(worldToCell(surfPos));
        cell /= vec3(LIGHT_GRID_SIZE_X, LIGHT_GRID_SIZE_Y, LIGHT_GRID_SIZE_Z);

        color = mod(cell.xyz * 8, vec3(1.0));

        if (!isInsideCell(surfPos))
        {
            color = vec3(getLuminance(color) * 0.2 + 0.4);
        }
    }
#if GRADIENT_ESTIMATION_ENABLED
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_GRADIENTS) != 0)
    {
        color.rgb = texelFetch(framebufDISPingGradient_Sampler, getCheckerboardPix(pix) / COMPUTE_ASVGF_STRATA_SIZE, 0).xyz;
    }
#endif
#ifdef DEBUG_SHOW_SH
    const ivec2 checkSHRange = ivec2(800, 400);

    if (pix.x < checkSHRange.x && pix.y < checkSHRange.y)
    {
        vec2 uv = vec2(pix.x / float(checkSHRange.x), pix.y / float(checkSHRange.y));

        float theta = uv.x * 2.0 * M_PI;
        float phi = uv.y * M_PI;
        vec3 normal = vec3(cos(theta) * sin(phi), sin(theta) * sin(phi), cos(phi));

        ivec2 centerPix = ivec2(globalUniform.renderWidth * 0.5, globalUniform.renderHeight * 0.5);
        SH indirSH = texelFetchSH(
            //framebufUnfilteredIndirectSH_R_Sampler, framebufUnfilteredIndirectSH_G_Sampler, framebufUnfilteredIndirectSH_B_Sampler,
            framebufIndirPongSH_R_Sampler, framebufIndirPongSH_G_Sampler, framebufIndirPongSH_B_Sampler, 
            getCheckerboardPix(centerPix));

        imageStore(framebufPreFinal, pix, vec4(SHToIrradiance(indirSH, normal), 0));
        return;
    }
#endif


   imageStore(framebufPreFinal, pix, vec4(color, 0));
}