// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

// "Gradient Estimation for Real-Time Adaptive Temporal Filtering", C.Schied et al.

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_VERTEX_DATA 2
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_GRADIENT_MERGING_GROUP_SIZE_X, local_size_y = COMPUTE_GRADIENT_MERGING_GROUP_SIZE_X, local_size_z = 1) in;


#if GRADIENT_ESTIMATION_ENABLED


void main()
{
    const ivec2 gradPix = ivec2(gl_GlobalInvocationID);
    const ivec2 screenSize = ivec2(globalUniform.renderWidth, globalUniform.renderHeight);

    if (gradPix.x * COMPUTE_ASVGF_STRATA_SIZE >= screenSize.x || gradPix.y * COMPUTE_ASVGF_STRATA_SIZE >= screenSize.y)
    {
        return;
    }


    const uint grFB = texelFetch(framebufGradientSamples_Prev_Sampler, gradPix, 0).x;
    const uvec2 prevStrataPos = uvec2(grFB % COMPUTE_ASVGF_STRATA_SIZE, grFB / COMPUTE_ASVGF_STRATA_SIZE);

    // (c) was done in primary rays shader
    // (a) instead of choosing random sample in strata, choose the brightest
    ivec2 lastStrataPos = ivec2(0);
    ivec2 lastPrevPix = ivec2(0);
    float lastLuminance = 0;
    float lastLuminanceSpec = 0;
    bool found = false;

    // for each pixel in strata
    for (int yy = 0; yy < COMPUTE_ASVGF_STRATA_SIZE; yy++)
    {
        for (int xx = 0; xx < COMPUTE_ASVGF_STRATA_SIZE; xx++)
        {
            if (prevStrataPos.x == xx && prevStrataPos.y == yy)
            {
                continue;
            }

            const ivec2 curPix = gradPix * COMPUTE_ASVGF_STRATA_SIZE + ivec2(xx, yy);
            const ivec2 prevPix = ivec2(floor(getPrevScreenPos(framebufMotion_Sampler, curPix)));

            const vec3 prevColor = texelFetchUnfilteredDirect(prevPix);
            const float prevLuminance = getLuminance(prevColor);

            const vec3 prevSpec = texelFetchUnfilteredSpecular(prevPix);
            const float prevLuminanceSpec = getLuminance(prevSpec);

            if (lastLuminance < prevLuminance)
            {
                lastStrataPos = ivec2(xx, yy);
                lastPrevPix = prevPix;
                
                lastLuminance = prevLuminance;
                lastLuminanceSpec = prevLuminanceSpec;

                found = true;
            }
        }
    }

    if (!found)
    {
        imageStore(framebufGradientSamples, gradPix, uvec4(UINT32_MAX));
        return;
    }

    const float lastIndirLuminance = getLuminance(getSHColor(texelFetchUnfilteredIndirectSH(lastPrevPix)));


    // (b) forward-projected sample
    const ivec2 samplePix = gradPix * COMPUTE_ASVGF_STRATA_SIZE + lastStrataPos;
    const ivec2 samplePrevPix = lastPrevPix;

    const float motionZ   = texelFetch(framebufMotion_Sampler,                samplePix,     0).z;
 
    const float depth     = texelFetch(framebufDepth_Sampler,                 samplePix,     0).r;
    const float depthPrev = texelFetch(framebufDepth_Prev_Sampler,            samplePrevPix, 0).r;

    const vec3 normal     = texelFetchNormal(                                 samplePix);
    const vec3 normalPrev = texelFetchNormal_Prev(                            samplePrevPix);

    const vec4 visBuf     = texelFetch(framebufVisibilityBuffer_Sampler,      samplePix,     0);
    const vec4 visBufPrev = texelFetch(framebufVisibilityBuffer_Prev_Sampler, samplePrevPix, 0);

    const int instCustomIndex = unpackInstCustomIndexFromVisibilityBuffer(visBuf);
    const int instCustomIndexPrev = unpackInstCustomIndexFromVisibilityBuffer(visBufPrev);

    const bool isConsistent = 
        testPixInRenderArea(samplePrevPix, getCheckerboardedRenderArea(samplePix)) &&
        testReprojectedDepth(depth, depthPrev, motionZ) &&
        testReprojectedNormal(normal, normalPrev) &&
        instCustomIndex == instCustomIndexPrev;

    if (!isConsistent)
    {
        imageStore(framebufGradientSamples, gradPix, uvec4(UINT32_MAX));
        return;
    }

    // save position in strata and mark that strata has gradient sample
    const uint packedStrataPos = lastStrataPos.x + lastStrataPos.y * COMPUTE_ASVGF_STRATA_SIZE;
    imageStore(framebufGradientSamples, gradPix, uvec4(packedStrataPos, 
                                                       floatBitsToUint(lastLuminance), 
                                                       floatBitsToUint(lastLuminanceSpec), 
                                                       floatBitsToUint(lastIndirLuminance)));
    
    // (d) merge new samples with chosen forward-projected sample 
    // from previous frame before tracing illumination
    
    // seeds
    const uint oldSeed = texelFetch(framebufRandomSeed_Prev_Sampler, samplePrevPix, 0).r;
    imageStore(framebufRandomSeed,        samplePix, uvec4(oldSeed));
    
    // surface shading samples
    imageStoreNormalGeometry(             samplePix, texelFetchNormalGeometry_Prev(samplePrevPix));
    imageStoreNormal(                     samplePix, normalPrev);
    imageStore(framebufMetallicRoughness, samplePix, texelFetch(framebufMetallicRoughness_Prev_Sampler, samplePrevPix, 0));
    imageStore(framebufSectorIndex,       samplePix, texelFetch(framebufSectorIndex_Prev_Sampler, samplePrevPix, 0));

    vec3 pos;
    const bool matchedSurface = unpackPrevVisibilityBuffer(visBufPrev, pos);
    
    if (matchedSurface)
    {
        const vec3 viewDir = normalize(pos - globalUniform.cameraPosition.xyz);

        // don't forget instCustomIndex in alpha-channel
        imageStore(framebufSurfacePosition, samplePix, vec4(pos, uintBitsToFloat(instCustomIndexPrev)));
        imageStore(framebufViewDirection,   samplePix, vec4(viewDir, 0.0));
    }
}


#else
void main() {}
#endif // GRADIENT_ESTIMATION_ENABLED