// Copyright (c) 2022 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_VOLUMETRIC     0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_RANDOM         2
#define DESC_SET_FRAMEBUFFERS   3
#include "ShaderCommonGLSLFunc.h"
#include "Random.h"
#include "Volumetric.h"

layout( local_size_x = COMPUTE_SCATTER_ACCUM_GROUP_SIZE_X,
        local_size_y = COMPUTE_SCATTER_ACCUM_GROUP_SIZE_X,
        local_size_z = 1 ) in;

layout( push_constant ) uniform ScatterAccumPush_BT
{
    float maxHistoryLength;
}
push;

vec4 fializeScattering( ivec2 regularPix )
{
    if( globalUniform.volumeEnableType == VOLUME_ENABLE_VOLUMETRIC )
    {
        vec3 position;
        {
            vec2 screen = { float( regularPix.x ) / globalUniform.renderWidth,
                            float( regularPix.y ) / globalUniform.renderHeight };

            vec4 ndc = { screen.x * 2.0 - 1.0,
                         screen.y * 2.0 - 1.0,
                         texelFetch( framebufDepthNdc_Sampler, regularPix, 0 ).x,
                         1.0 };

            vec4 worldpos = globalUniform.invView * globalUniform.invProjection * ndc;
            position      = worldpos.xyz / worldpos.w;
        }

#ifdef DEBUG_VOLUME_ILLUMINATION
        vec3 sp = volume_toSamplePosition_T(
            position.xyz, globalUniform.volumeViewProj, globalUniform.cameraPosition.xyz );
        vec3 illum = textureLod( g_illuminationVolume_Sampler, sp, 0.0 ).rgb;
        return color * illum;
#endif

        uint seed = getRandomSeed( regularPix, globalUniform.frameId );
        vec3 rnd  = rnd8_4( seed, 0 ).xyz;

        float      oop;
        const vec3 offset = sampleHemisphere( rnd.x, rnd.y, oop );

        return volume_sampleDithered( position, rnd.z, -offset, 2.0f );
    }
    else if( globalUniform.volumeEnableType == VOLUME_ENABLE_SIMPLE )
    {
        float virtualdepth =
            texelFetch( framebufDepthWorld_Sampler, getCheckerboardPix( regularPix ), 0 ).r;
        bool isSky = virtualdepth > MAX_RAY_LENGTH;

        float density = globalUniform.volumeScattering * 0.00005;

        if( !isSky )
        {
            float f = exp( -virtualdepth * density );
            return vec4( globalUniform.volumeAmbient.rgb * ( 1.0f - f ), f );
        }
        else
        {
            return vec4( vec3( 0 ), 1.0 );
        }
    }
    else
    {
        return vec4( vec3( 0 ), 1.0 );
    }
}

void main()
{
    const ivec2 pix = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y );
    if( pix.x >= uint( globalUniform.renderWidth ) || pix.y >= uint( globalUniform.renderHeight ) )
    {
        return;
    }

    const float motionZ = texelFetch( framebufMotion_Sampler, pix, 0 ).z;
    const float depth   = texelFetch( framebufDepthWorld_Sampler, pix, 0 ).r;
    const vec3  normal  = texelFetchNormal( pix );

    ivec2 pixPrev;
    vec2  subPix;
    {
        const vec2 posPrev = getPrevScreenPos( framebufMotion_Sampler, pix );

        pixPrev = ivec2( floor( posPrev - 0.5 ) );
        subPix  = ( posPrev - 0.5 ) - floor( posPrev - 0.5 );
    }
    const float bilinearWeights[ 2 ][ 2 ] = {
        { ( 1.0 - subPix.x ) * ( 1.0 - subPix.y ), subPix.x * ( 1.0 - subPix.y ) },
        { ( 1.0 - subPix.x ) * subPix.y, subPix.x * subPix.y },
    };

    vec4  accum      = vec4( 0 );
    float historyLen = 0;
    float weightSum  = 0;

    // 2x2 tap bilinear interpolation
    for( int yy = 0; yy <= 1; yy++ )
    {
        for( int xx = 0; xx <= 1; xx++ )
        {
            ivec2 xy = pixPrev + ivec2( xx, yy );

            float depthPrev  = texelFetch( framebufDepthWorld_Prev_Sampler, xy, 0 ).r;
            vec3  normalPrev = texelFetchNormal_Prev( xy );

            if( testPixInRenderArea( xy, getCheckerboardedRenderArea( pix ) ) &&
                testReprojectedDepth( depth, depthPrev, motionZ ) &&
                testReprojectedNormal( normal, normalPrev ) )
            {
                const float weight = bilinearWeights[ yy ][ xx ];

                accum += weight * texelFetch( framebufScattering_Prev_Sampler,
                                              getRegularPixFromCheckerboardPix( xy ),
                                              0 );
                historyLen += weight * texelFetch( framebufScatteringHistory_Prev_Sampler,
                                                   getRegularPixFromCheckerboardPix( xy ),
                                                   0 )
                                           .r;
                weightSum += weight;
            }
        }
    }

    historyLen = weightSum > 0.0001 ? historyLen / weightSum : 0;
    accum      = weightSum > 0.0001 ? accum / weightSum : vec4( 0 );

    historyLen = clamp( historyLen + 1, 1, max( 1.0, push.maxHistoryLength ) );
    accum      = mix( accum, fializeScattering( getRegularPixFromCheckerboardPix( pix ) ), 1.0 / historyLen );

    imageStore( framebufScattering, getRegularPixFromCheckerboardPix( pix ), accum );
    imageStore(
        framebufScatteringHistory, getRegularPixFromCheckerboardPix( pix ), vec4( historyLen ) );
}
