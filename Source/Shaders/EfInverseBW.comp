// Copyright (c) 2022 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#include "EfSimple.inl"

float getBW(vec3 color)
{
    return max(max(color.r, color.g), color.b);
}

void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    
    if (!effect_isPixValid(pix))
    {
        return;
    }

    vec3 color = effect_loadFromSource(pix);

    // sample albedo, so dark places will be visible too
    const ivec2 rendPix = ivec2(effect_getFramebufUV(pix) * vec2(globalUniform.renderWidth, globalUniform.renderHeight));
    const vec3 albedo = texelFetch(framebufAlbedo_Sampler, rendPix, 0).rgb;

    float bw = max(getBW(color), getBW(albedo));
    bw = sqrt(bw);

    const int L = 32;
    bw = clamp(int(bw * L), 0, L) / float(L);

    effect_storeToTarget(mix(color, vec3(1 - bw), getProgress()), pix);
}