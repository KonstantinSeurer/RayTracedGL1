// Copyright (c) 2022 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

// don't need albedo for direct illumination
#define MATERIAL_MAX_ALBEDO_LAYERS 0

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define RAYGEN_SHADOW_PAYLOAD
#include "RaygenCommon.h"

#define GRID_CELL_OFFSET_MULTIPLIER 1.5

Reservoir calculateInitialReservoir(uint seed, const Surface surf, const vec2 pointRnd)
{
    if (surf.isSky)
    {
        return emptyReservoir();
    }

    Reservoir regularReservoir = emptyReservoir();
    if (isInsideCell(surf.position))
    {
        vec3 gridWorldPos = surf.position + (rndBlueNoise8(seed, 43).xyz * 2.0 - 1.0) * getCellRadius() * GRID_CELL_OFFSET_MULTIPLIER;
        int lightGridBase = cellToArrayIndex(worldToCell(gridWorldPos));

        for (int i = 0; i < INITIAL_SAMPLES; i++)
        {
            // uniform distribution as a coarse source pdf
            float rnd = rnd16(seed, RANDOM_SALT_LIGHT_CHOOSE(i));
            int lightGridArrayIndex = lightGridBase + 
                clamp(int(rnd * LIGHT_GRID_CELL_SIZE), 0, LIGHT_GRID_CELL_SIZE - 1);
            Reservoir r = unpackReservoirFromLightGrid(initialLightsGrid[lightGridArrayIndex]);

            uint xi = r.selected;
            float oneOverSourcePdf_xi = r.weightSum / r.selected_targetPdf;

            LightSample lightSample = sampleLight(lightSources[xi], surf.position, pointRnd);
            float targetPdf_xi = targetPdfForLightSample(lightSample, surf);

            float rndRis = rnd16(seed, RANDOM_SALT_RIS(i));
            updateReservoir(regularReservoir, xi, targetPdf_xi, oneOverSourcePdf_xi, rndRis);
        }
    }
    else
    {      
        for (int i = 0; i < INITIAL_SAMPLES; i++)
        {
            // uniform distribution as a coarse source pdf
            float rnd = rnd16(seed, RANDOM_SALT_LIGHT_CHOOSE(i));
            uint xi = LIGHT_ARRAY_REGULAR_LIGHTS_OFFSET + clamp(uint(rnd * globalUniform.lightCount), 0, globalUniform.lightCount - 1);
            float oneOverSourcePdf_xi = globalUniform.lightCount;

            LightSample lightSample = sampleLight(lightSources[xi], surf.position, pointRnd);
            float targetPdf_xi = targetPdfForLightSample(lightSample, surf);

            float rndRis = rnd16(seed, RANDOM_SALT_RIS(i));
            updateReservoir(regularReservoir, xi, targetPdf_xi, oneOverSourcePdf_xi, rndRis);
        }
    }
    normalizeReservoir(regularReservoir, 1);


    Reservoir dirLightReservoir = emptyReservoir();
    if (globalUniform.directionalLightExists != 0)
    {
        uint xi = LIGHT_ARRAY_DIRECTIONAL_LIGHT_OFFSET;
        float oneOverSourcePdf_xi = 1;

        LightSample lightSample = sampleLight(lightSources[xi], surf.position, pointRnd);
        float targetPdf_xi = targetPdfForLightSample(lightSample, surf);

        float rndRis = rnd16(seed, RANDOM_SALT_RIS(INITIAL_SAMPLES + 0));
        updateReservoir(dirLightReservoir, xi, targetPdf_xi, oneOverSourcePdf_xi, rndRis);
    }
    normalizeReservoir(dirLightReservoir, 1);


    float rnd = rnd16(seed, RANDOM_SALT_RIS(INITIAL_SAMPLES + 1)); 
    Reservoir combined;
    initCombinedReservoir(
        combined, 
        regularReservoir);
    updateCombinedReservoir(
        combined, 
        dirLightReservoir, rnd);
    normalizeReservoir(combined, 1);

    return combined;
}

void main()
{
    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);
    const uint seed = getCurrentRandomSeed(pix);
    const Surface surf = fetchGbufferSurface(pix);
    const vec2 pointRnd = rndBlueNoise8(seed, RANDOM_SALT_LIGHT_POINT).xy * 0.99;

    Reservoir normalizedInitial = calculateInitialReservoir(seed, surf, pointRnd);
    imageStoreReservoirInitial(normalizedInitial, pix);
}