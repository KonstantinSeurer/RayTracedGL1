// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

layout (constant_id = 0) const uint maxAlbedoLayerCount = 0;
#define MATERIAL_MAX_ALBEDO_LAYERS maxAlbedoLayerCount

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define DESC_SET_CUBEMAPS 7
#define DESC_SET_RENDER_CUBEMAP 8
#define LIGHT_SAMPLE_METHOD (LIGHT_SAMPLE_METHOD_INDIR)
#include "RaygenCommon.h"

float getModifiedIndirRoughness(float r)
{
    return globalUniform.useSqrtRoughnessForIndirect == 0 ? r : sqrt(r);
}

// v -- direction to viewer
// n -- surface normal
vec3 getSpecularBounce(
    const uint seed, uint bounceIndex,
    const vec3 n, const float roughness, const vec3 surfSpecularColor,
    const vec3 v, inout vec3 throughput)
{
    const vec2 u = rndBlueNoise8(seed, RANDOM_SALT_SPEC_BOUNCE(bounceIndex)).xy;

    // sample microfacet normal
    const vec3 m = sampleSmithGGX(n, v, getModifiedIndirRoughness(roughness), u[0], u[1]);

    // light sample; incident vector must point to surface
    const vec3 l = normalize(reflect(-v, m));

    const float nl = max(dot(n, l), 0.0);
    const float nv = max(dot(n, v), 0.0);

    if (nl > 0 && nv > 0)
    {
        // "Sampling the GGX Distribution of Visible Normals", Heitz
        // equation 19: F * G2(v,l) / G1(v)
        // which is already contains division by PDF.
        // Let G2 be the simplest: G2(v,l) = G1(v) * G1(l)
        // => F * G1(l)
        
        const vec3 F = getFresnelSchlick(nl, surfSpecularColor);
        const float G1 = G1GGX(l, n, roughness);

        throughput *= F * G1;
    }

    return l;
}

// n -- surface normal
vec3 getDiffuseBounce(const uint seed, uint bounceIndex, const vec3 n, inout vec3 throughput)
{
    const vec2 u = rndBlueNoise8(seed, RANDOM_SALT_DIFF_BOUNCE(bounceIndex)).xy;

    float oneOverPdf;
    vec3 l = sampleLambertian(n, u[0], u[1], oneOverPdf);
    throughput *= evalBRDFLambertian(1.0) * oneOverPdf;

    return l;
}


#define FIRST_BOUNCE_MIP_BIAS 0
#define SECOND_BOUNCE_MIP_BIAS 32

Surface traceBounce(
    const vec3 originPosition, float originRoughness, uint originInstCustomIndex, 
    const vec3 bounceDirection, float bounceMipBias)
{
    const ShPayload p = traceIndirectRay(originInstCustomIndex, originPosition, bounceDirection); 

    if (!doesPayloadContainHitInfo(p))
    {
        Surface s;
        s.isSky = true;
        return s;
    }

    return hitInfoToSurface_Indirect(
        getHitInfoBounce(p, originPosition, originRoughness, bounceMipBias), 
        bounceDirection);
}

vec3 processSecondBounce(
    const uint seed, 
    const Surface surf, 
    const vec3 bounceDirection,
    inout vec3 throughput)
{
    const Surface hitSurf = traceBounce(
        surf.position + surf.normalGeom * 0.01, surf.roughness, surf.instCustomIndex, 
        bounceDirection, SECOND_BOUNCE_MIP_BIAS); 

    if (hitSurf.isSky)
    {
        return getSky(bounceDirection) * throughput;
    }

    // calculate direct illumination only for directional lights in hit position
    const vec3 diffuse = processDirectIllumination(seed, hitSurf, 2);
    throughput *= hitSurf.albedo;

    return hitSurf.emission * hitSurf.albedo + diffuse * throughput;
}

// Traces bounce ray, computes direct illumination in a hit point
vec3 processBounce(
    bool withSecondBounceAndDist,
    const uint seed, 
    const Surface surf, 
    const vec3 bounceDir_First, 
    inout vec3 throughput_First,
    out float rayHitDistance)
{
    const Surface hitSurf = traceBounce(
        surf.position + surf.normalGeom * 0.01, surf.roughness, surf.instCustomIndex, 
        bounceDir_First, FIRST_BOUNCE_MIP_BIAS); 

    if (hitSurf.isSky)
    {
        rayHitDistance = MAX_RAY_LENGTH;
        return getSky(bounceDir_First) * throughput_First;
    }
    
    // calculate direct illumination only for directional lights in hit position
    vec3 diffuse = processDirectIllumination(seed, hitSurf, 1);
    throughput_First *= hitSurf.albedo;


    if (withSecondBounceAndDist)
    {
        rayHitDistance = length(hitSurf.position - surf.position);

        vec3 throughput_Second = vec3(1.0);
        vec3 bounceDir_Second = getDiffuseBounce(seed, 2, hitSurf.normalGeom, throughput_Second);

        // second bounce contribution
        diffuse += processSecondBounce(
            seed, 
            hitSurf,
            bounceDir_Second,
            throughput_Second);  
    }


    return hitSurf.emission * hitSurf.albedo + diffuse * throughput_First;
}


vec3 processSpecular(const uint seed, const Surface surf, out float rayHitDistance)
{
    vec3 throughput = vec3(1.0);
    vec3 bounceDirection = getSpecularBounce(seed, 1, surf.normal, surf.roughness, surf.specularColor, surf.toViewerDir, throughput);

    return processBounce(
        true,
        seed, 
        surf,
        bounceDirection,
        throughput,
        rayHitDistance);
}

SH processIndirectDiffuse(const uint seed, const Surface surf)
{
    vec3 throughput = vec3(1.0);
    vec3 bounceDirection = getDiffuseBounce(seed, 1, surf.normalGeom, throughput);
    float unusedf;

    const vec3 contrib = processBounce(
        false,
        seed, 
        surf,
        bounceDirection,
        throughput,
        unusedf);

    return irradianceToSH(contrib, bounceDirection);
}


// v -- direction to viewer
void processIndirectIllumination(const ivec2 pix, const uint seed, const Surface surf)
{
    if (surf.roughness <= FAKE_ROUGH_SPECULAR_THRESHOLD + FAKE_ROUGH_SPECULAR_LENGTH)
    {
        const vec3 directSpecular = texelFetchUnfilteredSpecular(pix);
        float rayHitDistance = 0;

        vec3 contribution = processSpecular(seed, surf, rayHitDistance);

        if (getLuminance(directSpecular) < getLuminance(contribution))
        {
            imageStore(framebufViewDirection, pix, vec4(-surf.toViewerDir, rayHitDistance));
        }

        // demodulate for denoising
        imageStoreUnfilteredSpecular(pix, directSpecular + demodulateSpecular(contribution, surf.specularColor));
    }

    {
        const SH bounceSH = processIndirectDiffuse(seed, surf);

        imageStoreUnfilteredIndirectSH(pix, bounceSH);
    }
}


void main()
{
    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);
    const uint seed = getRandomSeed(pix, globalUniform.frameId);

    Surface surf = fetchGbufferSurface(pix);
    surf.position += surf.toViewerDir * RAY_ORIGIN_LEAK_BIAS;

    if (surf.isSky)
    {
        return;
    }

    processIndirectIllumination(pix, seed, surf);        
}