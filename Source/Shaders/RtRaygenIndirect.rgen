// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

layout (constant_id = 0) const uint maxAlbedoLayerCount = 0;
#define MATERIAL_MAX_ALBEDO_LAYERS maxAlbedoLayerCount

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define DESC_SET_CUBEMAPS 7
#define DESC_SET_RENDER_CUBEMAP 8
#define RAYGEN_SHADOW_PAYLOAD
#define RAYGEN_COMMON_ONLY_DIFFUSE
#define RAYGEN_ALLOW_FIREFLIES_CLAMP
#include "RaygenCommon.h"

float getModifiedIndirRoughness(float r)
{
    return globalUniform.useSqrtRoughnessForIndirect == 0 ? r : sqrt(r);
}

// v -- direction to viewer
// n -- surface normal
vec3 getSpecularBounce(
    const uint seed, const vec3 n, const float roughness, const vec3 surfSpecularColor,
    const vec3 v, inout vec3 throughput)
{
    const vec4 u = getRandomSample(seed, RANDOM_SALT_SPEC_BOUNCE(0));

    // sample microfacet normal
    const vec3 m = sampleSmithGGX(n, v, getModifiedIndirRoughness(roughness), u[0], u[1]);

    // light sample; incident vector must point to surface
    const vec3 l = normalize(reflect(-v, m));

    const float nl = max(dot(n, l), 0.0);
    const float nv = max(dot(n, v), 0.0);

    if (nl > 0 && nv > 0)
    {
        // "Sampling the GGX Distribution of Visible Normals", Heitz
        // equation 19: F * G2(v,l) / G1(v)
        // which is already contains division by PDF.
        // Let G2 be the simplest: G2(v,l) = G1(v) * G1(l)
        // => F * G1(l)
        
        const vec3 F = getFresnelSchlick(nl, surfSpecularColor);
        const float G1 = G1GGX(l, n, roughness);

        throughput *= F * G1;
    }

    return l;
}

// n -- surface normal
vec3 getDiffuseBounce(const uint seed, const vec3 n, inout vec3 throughput)
{
    const vec4 u = getRandomSample(seed, RANDOM_SALT_DIFF_BOUNCE(0));

    float oneOverPdf;
    vec3 l = sampleLambertian(n, u[0], u[1], oneOverPdf);
    throughput *= evalBRDFLambertian(1.0) * oneOverPdf;

    return l;
}


#define FIRST_BOUNCE_MIP_BIAS 0
#define SECOND_BOUNCE_MIP_BIAS 32

vec3 processSecondBounce(
    const uint seed, 
    const Surface surf, 
    const bool isGradientSample,
    const vec3 bounceDirection,
    inout vec3 throughput)
{
    // got the bounce direction, trace ray
    const ShPayload p = traceIndirectRay(surf.instCustomIndex, surf.position + surf.normalGeom * 0.01, bounceDirection); 

    if (doesPayloadContainHitInfo(p))
    {
        float hitDistance;
        Surface hitSurf = hitInfoToSurface_Indirect(
            getHitInfoBounce(p, surf.position, surf.roughness, SECOND_BOUNCE_MIP_BIAS, hitDistance), 
            bounceDirection);

        // calculate direct illumination only for directional lights in hit position
        vec3 diffuse, specular;
        processDirectIllumination(seed, hitSurf, isGradientSample, 2, diffuse, specular);
        throughput *= hitSurf.albedo;

        return hitSurf.emission * hitSurf.albedo + diffuse * throughput;
    }
    else
    {
        return getSky(bounceDirection) * throughput;
    }
}

// Traces bounce ray, computes direct illumination in hit point
vec3 processBounce(
    const uint seed, 
    const Surface surf, 
    const bool isGradientSample,
    const vec3 bounceDir_First, 
    inout vec3 throughput_First,
    out float rayHitDistance)
{
    // got the bounce direction, trace ray
    const ShPayload p = traceIndirectRay(surf.instCustomIndex, surf.position + surf.normalGeom * 0.01, bounceDir_First); 

    if (doesPayloadContainHitInfo(p))
    {
        float hitDistance;
        Surface hitSurf = hitInfoToSurface_Indirect(
            getHitInfoBounce(p, surf.position, surf.roughness, FIRST_BOUNCE_MIP_BIAS, hitDistance), 
            bounceDir_First);

        // calculate direct illumination only for directional lights in hit position
        vec3 diffuse, specular;
        processDirectIllumination(seed, hitSurf, isGradientSample, 1, diffuse, specular);
        throughput_First *= hitSurf.albedo;
        rayHitDistance = length(hitSurf.position - surf.position);


        vec3 throughput_Second = vec3(1.0);
        vec3 bounceDir_Second = getDiffuseBounce(seed, hitSurf.normalGeom, throughput_Second);

        vec3 contrib_Second = processSecondBounce(
            seed, 
            hitSurf,
            isGradientSample,
            bounceDir_Second,
            throughput_Second);


        return hitSurf.emission * hitSurf.albedo + (diffuse + contrib_Second) * throughput_First;
    }
    else
    {
        rayHitDistance = MAX_RAY_LENGTH;
        return getSky(bounceDir_First) * throughput_First;
    }
}


vec3 processSpecular(const uint seed, const Surface surf, const bool isGradientSample, out float rayHitDistance)
{
    vec3 throughput = vec3(1.0);
    vec3 bounceDirection = getSpecularBounce(seed, surf.normal, surf.roughness, surf.specularColor, surf.toViewerDir, throughput);

    return processBounce(
        seed, 
        surf, 
        isGradientSample,
        bounceDirection,
        throughput,
        rayHitDistance);
}

SH processIndirectDiffuse(const uint seed, const Surface surf, const bool isGradientSample)
{
    vec3 throughput = vec3(1.0);
    vec3 bounceDirection = getDiffuseBounce(seed, surf.normalGeom, throughput);
    float rayHitDistance;

    const vec3 contrib = processBounce(
        seed, 
        surf, 
        isGradientSample,
        bounceDirection,
        throughput,
        rayHitDistance);

    return irradianceToSH(contrib, bounceDirection);
}


// v -- direction to viewer
void processIndirectIllumination(const ivec2 pix, const uint seed, const Surface surf, const bool isGradientSample)
{
    if (surf.roughness <= FAKE_ROUGH_SPECULAR_THRESHOLD + FAKE_ROUGH_SPECULAR_LENGTH)
    {
        const vec3 directSpecular = texelFetchUnfilteredSpecular(pix);
        float rayHitDistance = 0;

        const vec3 contribution = processSpecular(seed, surf, isGradientSample, rayHitDistance);

        imageStoreUnfilteredSpecular(pix, directSpecular + contribution);

        if (getLuminance(directSpecular) < getLuminance(contribution))
        {
            imageStore(framebufViewDirection, pix, vec4(-surf.toViewerDir, rayHitDistance));
        }
    }

    {
        const SH bounceSH = processIndirectDiffuse(seed, surf, isGradientSample);

        imageStoreUnfilteredIndirectSH(pix, bounceSH);
    }
}


void main()
{
    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);
    const uint seed = getCurrentRandomSeed(pix);

    Surface surf = fetchGbufferSurface(pix);
    surf.position += surf.toViewerDir * RAY_ORIGIN_LEAK_BIAS;

    if (surf.isSky)
    {
        return;
    }

    processIndirectIllumination(pix, seed, surf, fetchAndCheckIsGradient(pix));        
}