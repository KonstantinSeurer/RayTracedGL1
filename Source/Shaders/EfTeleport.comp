// Copyright (c) 2022 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#include "EfSimple.inl"

// Silexars https://www.shadertoy.com/view/XsXXDn
vec3 makeStars( vec2 pix, vec2 size, float time )
{
    time = time * 2.3 + 3.0;

    vec3  c;
    float l, z = time;
    for( int i = 0; i < 3; i++ )
    {
        vec2 p  = pix / size;

        p = (p - 0.5) * 0.7;
        p = (p + 0.5);

        vec2 uv = p;
        p -= .5;
        p.x *= size.x / size.y;
        z += .07;
        l = length( p );
        uv += p / l * ( sin( z ) + 1. ) * abs( sin( l * 9. - z - z ) );
        c[ i ] = .01 / length( mod( uv, 1. ) - .5 );
    }
    return c / l;
}

void main()
{
    const ivec2 pix = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y );

    if( !effect_isPixValid( pix ) )
    {
        return;
    }

    const vec3 orig = vec3( 0, 1, 0 );

    vec3 stars = makeStars( vec2( pix ),
                            vec2( effect_getFramebufSize() ),
                            globalUniform.time - push.transitionBeginTime );

    effect_storeToTarget( mix( orig, stars, getProgress() ), pix );
}