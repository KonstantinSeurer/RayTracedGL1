// Copyright (c) 2022 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_GLOBAL_UNIFORM 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_LENS_FLARES 2
#include "ShaderCommonGLSLFunc.h"


layout(local_size_x = COMPUTE_INDIRECT_DRAW_FLARES_GROUP_SIZE_X, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const uint positionToCheckIsInScreenSpace = 0;


void getPixAndDepthFromWorldPoint(const vec3 position, out ivec2 pix, out float depthNdc)
{
    vec4 viewSpacePos = globalUniform.view * vec4(position, 1.0);
    vec4 clipSpacePos = globalUniform.projection * viewSpacePos;

    vec3 ndc = clipSpacePos.xyz / clipSpacePos.w;
    depthNdc = ndc.z;

    vec2 screenSpace = ndc.xy * 0.5 + 0.5;
    vec2 screenSize = vec2(globalUniform.renderWidth, globalUniform.renderHeight);
    pix = ivec2(round(screenSpace * screenSize));
}


void getPixAndDepthFromScreenPoint(const vec3 screenSpacePosition, out ivec2 pix, out float depthNdc)
{
    depthNdc = screenSpacePosition.z;

    // screenSpacePosition.xy is in [0..1]
    vec2 screenSize = vec2(globalUniform.renderWidth, globalUniform.renderHeight);
    pix = ivec2(round(screenSpacePosition.xy * screenSize));
}


void main()
{
    uint index = gl_GlobalInvocationID.x;

    if (index >= globalUniform.lensFlareCullingInputCount)
    {
        return;
    }


    if (index == 0)
    {
        lensFlareDrawCmdsCount = 0;
    }
    groupMemoryBarrier();


    const ShIndirectDrawCommand l = lensFlareCullingInput[index];
    
    ivec2 pix; 
    float depth;

    if (positionToCheckIsInScreenSpace != 0)
    {
        getPixAndDepthFromScreenPoint(vec3(l.positionToCheck_X, l.positionToCheck_Y, l.positionToCheck_Z), pix, depth);
    }
    else
    {
        getPixAndDepthFromWorldPoint(vec3(l.positionToCheck_X, l.positionToCheck_Y, l.positionToCheck_Z), pix, depth);
    }
    
    float occluderDepth = texelFetch(framebufDepth_Sampler, getCheckerboardPix(pix), 0).w;

    if (depth < occluderDepth + 0.00001 && 
        all(greaterThan(pix, ivec2(0))) &&
        all(lessThan(pix, ivec2(globalUniform.renderWidth, globalUniform.renderHeight))))
    {
        uint lensFlareDrawCmdIndex = atomicAdd(lensFlareDrawCmdsCount, 1);
        lensFlareDrawCmds[lensFlareDrawCmdIndex] = l;
    }
}