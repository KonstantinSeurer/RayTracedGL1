// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460


// "Gradient Estimation for Real-Time Adaptive Temporal Filtering", C.Schied et al.

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_GRADIENT_SAMPLES_GROUP_SIZE_X, local_size_y = COMPUTE_GRADIENT_SAMPLES_GROUP_SIZE_X, local_size_z = 1) in;


#if GRADIENT_ESTIMATION_ENABLED


void main()
{
    const ivec2 gradPix = ivec2(gl_GlobalInvocationID);
    const ivec2 screenSize = ivec2(globalUniform.renderWidth, globalUniform.renderHeight);

    if (gradPix.x * COMPUTE_ASVGF_STRATA_SIZE >= screenSize.x || gradPix.y * COMPUTE_ASVGF_STRATA_SIZE >= screenSize.y)
    {
        return;
    }

    // surface samples were shaded, prepare gradient samples
    const uvec4 grFB = texelFetch(framebufGradientSamples_Sampler, gradPix, 0);
    const bool hasSample = grFB.x != UINT32_MAX;

    if (!hasSample)
    {
        imageStore(framebufDISPingGradient, gradPix, vec4(0.0));
        return;
    }

    // (e) get luminance of shading sample from previous frame
    const float prevShadingSampleLuminance = uintBitsToFloat(grFB.y);
    const float prevShadingSampleLuminanceSpec = uintBitsToFloat(grFB.z);
    const float prevShadingSampleLuminanceIndir = uintBitsToFloat(grFB.w);

    // (f) get shading sample from current frame
    const ivec2 posInStrata = ivec2(grFB.x % COMPUTE_ASVGF_STRATA_SIZE, grFB.x / COMPUTE_ASVGF_STRATA_SIZE);
    const ivec2 shadingSamplePix = gradPix * COMPUTE_ASVGF_STRATA_SIZE + posInStrata;

    vec3 gradDIS = vec3(0.0);

    {
        const vec3 color = texelFetchUnfilteredDirect(shadingSamplePix);
        const float shadingSampleLuminance = getLuminance(color);

        const float gradSample = shadingSampleLuminance - prevShadingSampleLuminance;
        const float normFactor = max(shadingSampleLuminance, prevShadingSampleLuminance);

        gradDIS[0] = getAntilagAlpha(gradSample, normFactor);
    }
    {
        const vec3 color = getSHColor(texelFetchUnfilteredIndirectSH(shadingSamplePix));
        const float shadingSampleLuminance = getLuminance(color);

        const float gradSample = shadingSampleLuminance - prevShadingSampleLuminanceIndir;
        const float normFactor = max(shadingSampleLuminance, prevShadingSampleLuminanceIndir);

        gradDIS[1] = getAntilagAlpha(gradSample * 0.1, normFactor);
    }
    {
        const vec3 color = texelFetchUnfilteredSpecular(shadingSamplePix);
        const float shadingSampleLuminance = getLuminance(color);

        const float gradSample = shadingSampleLuminance - prevShadingSampleLuminanceSpec;
        const float normFactor = max(shadingSampleLuminance, prevShadingSampleLuminanceSpec);

        gradDIS[2] = getAntilagAlpha(gradSample, normFactor);
    }

    imageStore(framebufDISPingGradient, gradPix, vec4(gradDIS, 0.0));
}


#else
void main() {}
#endif // GRADIENT_ESTIMATION_ENABLED