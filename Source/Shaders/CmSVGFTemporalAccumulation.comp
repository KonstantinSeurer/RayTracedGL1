// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// Copyright (c) 2018, Christoph Schied
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Karlsruhe Institute of Technology nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#version 460

// "Spatiotemporal Variance-Guided Filtering: Real-Time Reconstruction for Path-Traced Global Illumination", C.Schied et al.
// 4.1 Temporal Filtering

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_SVGF_TEMPORAL_GROUP_SIZE_X, local_size_y = COMPUTE_SVGF_TEMPORAL_GROUP_SIZE_X, local_size_z = 1) in;

#define ONLY_TEMPORAL_SPEC_REPROJECTION 1

// Ray Tracing Gems II. Chapter 49: ReBLUR: A Hierarchical Recurrent Denoiser
float getSpecularDominantFactor(float nv, float roughness)
{
    float a = 0.298475 * log(39.4115 - 39.0029 * roughness);
    float f = pow(clamp(1.0 - nv, 0.0, 1.0), 10.8649)*(1.0 - a) + a;

    return clamp(f, 0.0, 1.0);
}

void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID);

    if (pix.x >= uint(globalUniform.renderWidth) || pix.y >= uint(globalUniform.renderHeight))
    {
        return;
    }

    const vec3 unfilteredDiff   = texelFetchUnfilteredDirect(       pix);
    const SH unfilteredIndirSH  = texelFetchUnfilteredIndirectSH(   pix);
    const vec3 unfilteredSpec   = texelFetchUnfilteredSpecular(     pix);

    const ivec3 chRenderArea    = getCheckerboardedRenderArea(      pix);
    const float motionZ         = texelFetch(framebufMotion_Sampler,pix, 0).z;
    const float depth           = texelFetch(framebufDepth_Sampler, pix, 0).r;
    const vec3 normal           = texelFetchNormal(                 pix);
    const float roughness       = texelFetch(framebufMetallicRoughness_Sampler, pix, 0).g;

    const float l = getLuminance(unfilteredDiff);
    const vec2 moments = vec2(l, l * l);


    ivec2 pixPrev; vec2 subPix;
    {
        const vec2 posPrev = getPrevScreenPos(framebufMotion_Sampler, pix);

        pixPrev = ivec2(floor(posPrev - 0.5));
        subPix = (posPrev - 0.5) - floor(posPrev - 0.5);
    }
    const float bilinearWeights[2][2] = 
    {
        { (1.0 - subPix.x) * (1.0 - subPix.y), subPix.x * (1.0 - subPix.y) },
        { (1.0 - subPix.x) * subPix.y,         subPix.x * subPix.y         },
    };


#if !ONLY_TEMPORAL_SPEC_REPROJECTION
    ivec2 pixPrev_Spec; vec2 subPix_Spec;
    {
        vec4 rayInfo    = texelFetch(framebufViewDirection_Sampler, pix, 0);
        vec3 virtualPos = texelFetch(framebufSurfacePosition_Sampler, pix, 0).xyz;
        {
            float rayLength = rayInfo.a * getSpecularDominantFactor(max(0, dot(normal, -rayInfo.xyz)), roughness);
            virtualPos += rayInfo.xyz * rayLength;
        }

        const vec4 viewSpacePosCur   = globalUniform.view     * vec4(virtualPos, 1.0);
        const vec4 viewSpacePosPrev  = globalUniform.viewPrev * vec4(virtualPos, 1.0);
        const vec4 clipSpacePosCur   = globalUniform.projection     * viewSpacePosCur;
        const vec4 clipSpacePosPrev  = globalUniform.projectionPrev * viewSpacePosPrev;
        const vec3 ndcCur            = clipSpacePosCur.xyz  / clipSpacePosCur.w;
        const vec3 ndcPrev           = clipSpacePosPrev.xyz / clipSpacePosPrev.w;
        const vec2 screenSpaceCur    = ndcCur.xy  * 0.5 + 0.5;
        const vec2 screenSpacePrev   = ndcPrev.xy * 0.5 + 0.5;
        const vec2 specMotion = (screenSpacePrev - screenSpaceCur);

        const vec2 specPosPrev = getPrevScreenPos(specMotion, pix);

        pixPrev_Spec = ivec2(floor(specPosPrev - 0.5));
        subPix_Spec = (specPosPrev - 0.5) - floor(specPosPrev - 0.5);
    }
    const float bilinearWeights_Spec[2][2] = 
    {
        { (1.0 - subPix_Spec.x) * (1.0 - subPix_Spec.y), subPix_Spec.x * (1.0 - subPix_Spec.y) },
        { (1.0 - subPix_Spec.x) * subPix_Spec.y,         subPix_Spec.x * subPix_Spec.y         },
    };
#endif


    // history length for direct, indirect, specular
    vec3 historyLengthDIS = vec3(0.0);
    vec3 diffPrev = vec3(0.0);
    vec2 momentsPrev = vec2(0.0);
    vec3 specPrev = vec3(0.0);
    SH indirPrev = newSH();
    float weightSum = 0.0;
#if !ONLY_TEMPORAL_SPEC_REPROJECTION
    float weightSum_Spec = 0.0;
#else
    #define weightSum_Spec weightSum
#endif

    // 2x2 tap bilinear interpolation
    for (int yy = 0; yy <= 1; yy++)
    {
        for(int xx = 0; xx <= 1; xx++)
        {
            {
                ivec2 xy = pixPrev + ivec2(xx, yy);

                float depthPrev = texelFetch(framebufDepth_Prev_Sampler, xy, 0).r;
                vec3 normalPrev = texelFetchNormal_Prev(xy);

                bool isConsistent = 
                    testPixInRenderArea(xy, chRenderArea) &&
                    testReprojectedDepth(depth, depthPrev, motionZ) &&
                    testReprojectedNormal(normal, normalPrev);

                if (isConsistent)
                {
                    const float weight = bilinearWeights[yy][xx];

#if !ONLY_TEMPORAL_SPEC_REPROJECTION
                    historyLengthDIS.rg += weight * texelFetch(framebufAccumHistoryLength_Prev_Sampler, xy, 0).rg;
#else
                    historyLengthDIS    += weight * texelFetch(framebufAccumHistoryLength_Prev_Sampler, xy, 0).rgb;
                    specPrev            += weight * texelFetchSpecAccumColor_Prev(xy);
#endif

                    diffPrev            += weight * texelFetch(framebufDiffColorHistory_Sampler,        xy, 0).rgb;
                    momentsPrev         += weight * texelFetch(framebufDiffAccumMoments_Prev_Sampler,   xy, 0).rg;    
                    
                    accumulateSH(indirPrev, texelFetchIndirAccumSH_Prev(xy), weight);

                    weightSum += weight;
                }
            }

#if !ONLY_TEMPORAL_SPEC_REPROJECTION
            {
                ivec2 xy_Spec = pixPrev_Spec + ivec2(xx, yy);

                float depthPrev = texelFetch(framebufDepth_Prev_Sampler, xy_Spec, 0).r;
                vec3 normalPrev = texelFetchNormal_Prev(xy_Spec);

                bool isConsistent = 
                    testPixInRenderArea(xy_Spec, chRenderArea) &&
                    testReprojectedDepth(depth, depthPrev, motionZ) &&
                    testReprojectedNormal(normal, normalPrev);

                if (isConsistent)
                {
                    const float weight = bilinearWeights_Spec[yy][xx];

                    historyLengthDIS.b += weight * texelFetch(framebufAccumHistoryLength_Prev_Sampler, xy_Spec, 0).b;
                    specPrev           += weight * texelFetchSpecAccumColor_Prev(xy_Spec);
                    weightSum_Spec     += weight;
                }
            }
#endif
        }
    }
    

    float antilagAlpha_Diff, antilagAlpha_Spec, antilagAlpha_Indir;

#if GRADIENT_ESTIMATION_ENABLED
    {
        const vec4 gradDiffSpec = texelFetch(framebufDiffAndSpecPingGradient_Sampler, pix / COMPUTE_ASVGF_STRATA_SIZE, 0);
        antilagAlpha_Diff = getAntilagAlpha(gradDiffSpec[0], gradDiffSpec[1]);
        antilagAlpha_Spec = getAntilagAlpha(gradDiffSpec[2] * 0.1, gradDiffSpec[3]);
        antilagAlpha_Indir = texelFetch(framebufIndirPingGradient_Sampler, pix / COMPUTE_ASVGF_STRATA_SIZE, 0).r;
    }
#else
    antilagAlpha_Diff  = 0.0;
    antilagAlpha_Spec  = 0.0;
    antilagAlpha_Indir = 0.0;
#endif


    vec3 specColorAccum;
    float specHistoryLengthAccum;

    // found consistent info
    if (weightSum_Spec > 0.0001)
    {
        specPrev /= weightSum_Spec;
        float specHistoryLength = historyLengthDIS[2] / weightSum_Spec; 

        // specular
        {
            // antilagAlpha_Spec *= (1 - roughness) * 0.9 + 0.1;

            specHistoryLength *= pow(1.0 - antilagAlpha_Spec, 5);
            specHistoryLength = clamp(specHistoryLength + 1.0, 1.0, mix(8.0, 64.0, roughness));

            const float minAlpha = 0.01;
            float alphaColor = max(minAlpha, 1.0 / specHistoryLength);

            alphaColor = mix(alphaColor, 1.0, antilagAlpha_Spec);

            specColorAccum = mix(specPrev, unfilteredSpec, alphaColor);
            specHistoryLengthAccum = specHistoryLength;
        }
    }
    else
    {
        specColorAccum = unfilteredSpec;
        specHistoryLengthAccum = 1.0;
    }


    vec3 diffColorAccum;
    vec2 diffMomentsAccum;
    float diffHistoryLengthAccum;

    SH indirSHAccum;
    float indirHistoryLengthAccum;

    // found consistent info
    if (weightSum > 0.0001)
    {
        const float invWeightSum = 1.0 / weightSum;

        diffPrev          *= invWeightSum;
        momentsPrev       *= invWeightSum;
        multiplySH(indirPrev, invWeightSum);

        float diffHistoryLength  = historyLengthDIS[0] * invWeightSum;
        float indirHistoryLength = historyLengthDIS[1] * invWeightSum;
        
        // direct diffuse
        {
            diffHistoryLength *= pow(1.0 - antilagAlpha_Diff, 10);
            diffHistoryLength = clamp(diffHistoryLength + 1.0, 1.0, 256.0);

            const float minAlpha = 0.01;
            float alphaColor   = max(minAlpha, 1.0 / diffHistoryLength);
            float alphaMoments = max(minAlpha, 1.0 / diffHistoryLength);

            alphaColor   = mix(alphaColor,   1.0, antilagAlpha_Diff);
            alphaMoments = mix(alphaMoments, 1.0, antilagAlpha_Diff);

            diffColorAccum   = mix(diffPrev, unfilteredDiff, alphaColor);
            diffMomentsAccum = mix(momentsPrev, moments, alphaMoments);
            diffHistoryLengthAccum = diffHistoryLength;
        }

        // indirect diffuse
        {
            indirHistoryLength *= pow(1.0 - antilagAlpha_Indir, 10);
            indirHistoryLength = clamp(indirHistoryLength + 1.0, 1.0, 256.0);

            const float minAlpha = 0.01;
            float alphaColor = max(minAlpha, 1.0 / indirHistoryLength);

            alphaColor = mix(alphaColor, 1.0, antilagAlpha_Indir);

            indirSHAccum = mixSH(indirPrev, unfilteredIndirSH, alphaColor);
            indirHistoryLengthAccum = indirHistoryLength;
        }
    }
    else
    {
        diffColorAccum = unfilteredDiff;
        diffMomentsAccum = moments;
        diffHistoryLengthAccum = 1.0;

        indirSHAccum = unfilteredIndirSH;
        indirHistoryLengthAccum = 1.0;
    }

    imageStoreDiffAccumColor(               pix, diffColorAccum);
    imageStore(framebufDiffAccumMoments,    pix, vec4(diffMomentsAccum, 0.0, 0.0));
    imageStore(framebufAccumHistoryLength,  pix, vec4(diffHistoryLengthAccum, indirHistoryLengthAccum, specHistoryLengthAccum, 0.0));

    imageStoreSpecAccumColor(               pix, specColorAccum);
    imageStoreSpecPingColor(                pix, specColorAccum);

    imageStoreIndirAccumSH(                 pix, indirSHAccum);
    imageStoreIndirPingSH(                  pix, indirSHAccum);
}